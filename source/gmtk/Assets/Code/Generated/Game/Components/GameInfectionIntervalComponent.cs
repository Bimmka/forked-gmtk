//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherInfectionInterval;

    public static Entitas.IMatcher<GameEntity> InfectionInterval {
        get {
            if (_matcherInfectionInterval == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.InfectionInterval);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherInfectionInterval = matcher;
            }

            return _matcherInfectionInterval;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Infections.InfectionInterval infectionInterval { get { return (Code.Gameplay.Features.Infections.InfectionInterval)GetComponent(GameComponentsLookup.InfectionInterval); } }
    public float InfectionInterval { get { return infectionInterval.Value; } }
    public bool hasInfectionInterval { get { return HasComponent(GameComponentsLookup.InfectionInterval); } }

    public GameEntity AddInfectionInterval(float newValue) {
        var index = GameComponentsLookup.InfectionInterval;
        var component = (Code.Gameplay.Features.Infections.InfectionInterval)CreateComponent(index, typeof(Code.Gameplay.Features.Infections.InfectionInterval));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceInfectionInterval(float newValue) {
        var index = GameComponentsLookup.InfectionInterval;
        var component = (Code.Gameplay.Features.Infections.InfectionInterval)CreateComponent(index, typeof(Code.Gameplay.Features.Infections.InfectionInterval));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveInfectionInterval() {
        RemoveComponent(GameComponentsLookup.InfectionInterval);
        return this;
    }
}
