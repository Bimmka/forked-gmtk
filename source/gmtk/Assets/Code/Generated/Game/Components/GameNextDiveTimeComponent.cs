//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherNextDiveTime;

    public static Entitas.IMatcher<GameEntity> NextDiveTime {
        get {
            if (_matcherNextDiveTime == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.NextDiveTime);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherNextDiveTime = matcher;
            }

            return _matcherNextDiveTime;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.SinkingIslands.NextDiveTime nextDiveTime { get { return (Code.Gameplay.Features.SinkingIslands.NextDiveTime)GetComponent(GameComponentsLookup.NextDiveTime); } }
    public float NextDiveTime { get { return nextDiveTime.Value; } }
    public bool hasNextDiveTime { get { return HasComponent(GameComponentsLookup.NextDiveTime); } }

    public GameEntity AddNextDiveTime(float newValue) {
        var index = GameComponentsLookup.NextDiveTime;
        var component = (Code.Gameplay.Features.SinkingIslands.NextDiveTime)CreateComponent(index, typeof(Code.Gameplay.Features.SinkingIslands.NextDiveTime));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceNextDiveTime(float newValue) {
        var index = GameComponentsLookup.NextDiveTime;
        var component = (Code.Gameplay.Features.SinkingIslands.NextDiveTime)CreateComponent(index, typeof(Code.Gameplay.Features.SinkingIslands.NextDiveTime));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveNextDiveTime() {
        RemoveComponent(GameComponentsLookup.NextDiveTime);
        return this;
    }
}
