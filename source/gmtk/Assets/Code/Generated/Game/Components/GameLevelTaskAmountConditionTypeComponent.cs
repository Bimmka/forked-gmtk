//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherLevelTaskAmountConditionType;

    public static Entitas.IMatcher<GameEntity> LevelTaskAmountConditionType {
        get {
            if (_matcherLevelTaskAmountConditionType == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.LevelTaskAmountConditionType);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherLevelTaskAmountConditionType = matcher;
            }

            return _matcherLevelTaskAmountConditionType;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.LevelTasks.LevelTaskAmountConditionTypeComponent levelTaskAmountConditionType { get { return (Code.Gameplay.Features.LevelTasks.LevelTaskAmountConditionTypeComponent)GetComponent(GameComponentsLookup.LevelTaskAmountConditionType); } }
    public Code.Gameplay.Features.LevelTasks.Config.LevelTaskAmountConditionType LevelTaskAmountConditionType { get { return levelTaskAmountConditionType.Value; } }
    public bool hasLevelTaskAmountConditionType { get { return HasComponent(GameComponentsLookup.LevelTaskAmountConditionType); } }

    public GameEntity AddLevelTaskAmountConditionType(Code.Gameplay.Features.LevelTasks.Config.LevelTaskAmountConditionType newValue) {
        var index = GameComponentsLookup.LevelTaskAmountConditionType;
        var component = (Code.Gameplay.Features.LevelTasks.LevelTaskAmountConditionTypeComponent)CreateComponent(index, typeof(Code.Gameplay.Features.LevelTasks.LevelTaskAmountConditionTypeComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceLevelTaskAmountConditionType(Code.Gameplay.Features.LevelTasks.Config.LevelTaskAmountConditionType newValue) {
        var index = GameComponentsLookup.LevelTaskAmountConditionType;
        var component = (Code.Gameplay.Features.LevelTasks.LevelTaskAmountConditionTypeComponent)CreateComponent(index, typeof(Code.Gameplay.Features.LevelTasks.LevelTaskAmountConditionTypeComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveLevelTaskAmountConditionType() {
        RemoveComponent(GameComponentsLookup.LevelTaskAmountConditionType);
        return this;
    }
}
