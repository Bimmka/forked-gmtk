//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAttachedSound;

    public static Entitas.IMatcher<GameEntity> AttachedSound {
        get {
            if (_matcherAttachedSound == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AttachedSound);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAttachedSound = matcher;
            }

            return _matcherAttachedSound;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Foxes.AttachedSound attachedSound { get { return (Code.Gameplay.Features.Foxes.AttachedSound)GetComponent(GameComponentsLookup.AttachedSound); } }
    public Code.Gameplay.Sounds.Behaviours.SoundElement AttachedSound { get { return attachedSound.Value; } }
    public bool hasAttachedSound { get { return HasComponent(GameComponentsLookup.AttachedSound); } }

    public GameEntity AddAttachedSound(Code.Gameplay.Sounds.Behaviours.SoundElement newValue) {
        var index = GameComponentsLookup.AttachedSound;
        var component = (Code.Gameplay.Features.Foxes.AttachedSound)CreateComponent(index, typeof(Code.Gameplay.Features.Foxes.AttachedSound));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAttachedSound(Code.Gameplay.Sounds.Behaviours.SoundElement newValue) {
        var index = GameComponentsLookup.AttachedSound;
        var component = (Code.Gameplay.Features.Foxes.AttachedSound)CreateComponent(index, typeof(Code.Gameplay.Features.Foxes.AttachedSound));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAttachedSound() {
        RemoveComponent(GameComponentsLookup.AttachedSound);
        return this;
    }
}
