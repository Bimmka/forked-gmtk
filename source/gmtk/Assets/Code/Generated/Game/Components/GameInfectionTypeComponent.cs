//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherInfectionType;

    public static Entitas.IMatcher<GameEntity> InfectionType {
        get {
            if (_matcherInfectionType == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.InfectionType);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherInfectionType = matcher;
            }

            return _matcherInfectionType;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Infections.InfectionTypeComponent infectionType { get { return (Code.Gameplay.Features.Infections.InfectionTypeComponent)GetComponent(GameComponentsLookup.InfectionType); } }
    public Code.Gameplay.Features.Infections.Configs.InfectionType InfectionType { get { return infectionType.Value; } }
    public bool hasInfectionType { get { return HasComponent(GameComponentsLookup.InfectionType); } }

    public GameEntity AddInfectionType(Code.Gameplay.Features.Infections.Configs.InfectionType newValue) {
        var index = GameComponentsLookup.InfectionType;
        var component = (Code.Gameplay.Features.Infections.InfectionTypeComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Infections.InfectionTypeComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceInfectionType(Code.Gameplay.Features.Infections.Configs.InfectionType newValue) {
        var index = GameComponentsLookup.InfectionType;
        var component = (Code.Gameplay.Features.Infections.InfectionTypeComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Infections.InfectionTypeComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveInfectionType() {
        RemoveComponent(GameComponentsLookup.InfectionType);
        return this;
    }
}
