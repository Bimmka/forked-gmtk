//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherReplicationTimeLeft;

    public static Entitas.IMatcher<GameEntity> ReplicationTimeLeft {
        get {
            if (_matcherReplicationTimeLeft == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ReplicationTimeLeft);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherReplicationTimeLeft = matcher;
            }

            return _matcherReplicationTimeLeft;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Rabbits.ReplicationTimeLeft replicationTimeLeft { get { return (Code.Gameplay.Features.Rabbits.ReplicationTimeLeft)GetComponent(GameComponentsLookup.ReplicationTimeLeft); } }
    public float ReplicationTimeLeft { get { return replicationTimeLeft.Value; } }
    public bool hasReplicationTimeLeft { get { return HasComponent(GameComponentsLookup.ReplicationTimeLeft); } }

    public GameEntity AddReplicationTimeLeft(float newValue) {
        var index = GameComponentsLookup.ReplicationTimeLeft;
        var component = (Code.Gameplay.Features.Rabbits.ReplicationTimeLeft)CreateComponent(index, typeof(Code.Gameplay.Features.Rabbits.ReplicationTimeLeft));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceReplicationTimeLeft(float newValue) {
        var index = GameComponentsLookup.ReplicationTimeLeft;
        var component = (Code.Gameplay.Features.Rabbits.ReplicationTimeLeft)CreateComponent(index, typeof(Code.Gameplay.Features.Rabbits.ReplicationTimeLeft));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveReplicationTimeLeft() {
        RemoveComponent(GameComponentsLookup.ReplicationTimeLeft);
        return this;
    }
}
