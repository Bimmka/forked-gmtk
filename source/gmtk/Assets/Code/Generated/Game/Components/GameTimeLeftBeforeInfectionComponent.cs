//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTimeLeftBeforeInfection;

    public static Entitas.IMatcher<GameEntity> TimeLeftBeforeInfection {
        get {
            if (_matcherTimeLeftBeforeInfection == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TimeLeftBeforeInfection);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTimeLeftBeforeInfection = matcher;
            }

            return _matcherTimeLeftBeforeInfection;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Infections.TimeLeftBeforeInfection timeLeftBeforeInfection { get { return (Code.Gameplay.Features.Infections.TimeLeftBeforeInfection)GetComponent(GameComponentsLookup.TimeLeftBeforeInfection); } }
    public float TimeLeftBeforeInfection { get { return timeLeftBeforeInfection.Value; } }
    public bool hasTimeLeftBeforeInfection { get { return HasComponent(GameComponentsLookup.TimeLeftBeforeInfection); } }

    public GameEntity AddTimeLeftBeforeInfection(float newValue) {
        var index = GameComponentsLookup.TimeLeftBeforeInfection;
        var component = (Code.Gameplay.Features.Infections.TimeLeftBeforeInfection)CreateComponent(index, typeof(Code.Gameplay.Features.Infections.TimeLeftBeforeInfection));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTimeLeftBeforeInfection(float newValue) {
        var index = GameComponentsLookup.TimeLeftBeforeInfection;
        var component = (Code.Gameplay.Features.Infections.TimeLeftBeforeInfection)CreateComponent(index, typeof(Code.Gameplay.Features.Infections.TimeLeftBeforeInfection));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTimeLeftBeforeInfection() {
        RemoveComponent(GameComponentsLookup.TimeLeftBeforeInfection);
        return this;
    }
}
